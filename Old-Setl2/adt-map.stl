class Map;

    procedure create();

    procedure find(k1);
    procedure insert(k1, v1);
    procedure delete(k1);
    
    procedure show();
    procedure selfstr();

end Map;

class body Map;

    -- This variable is shared by all instances of the class Map.
    -- It is needed to generate unique file names for the dot files.
    class var count        := 0;
    class var counterZeros := 0;

    var tree;

    procedure create();
        tree := [];
    end create;

    procedure find(k1);
        if tree = [] then
            return;
        end if;
        [ k2, v, l, r ] := tree;
        if k1 = k2 then
            return v;
        elseif k1 < k2 then
            return l.find(k1);
        else
            return r.find(k1);
        end if;
    end find;

    procedure insert(k1, v1);
        if tree = [] then
            l := Map();
            r := Map();
            tree := [ k1, v1, l, r ];
            return;
        end if;
        [ k2, v2, l, r ] := tree;
        if k1 = k2 then
            tree := [ k1, v1, l, r ];
            return;
        end if;
        if k1 < k2 then
            l.insert(k1, v1);
        else
            r.insert(k1, v1);
        end if;
        tree := [ k2, v2, l, r ];
    end insert;

    procedure delete(k1);
        if tree = [] then
            return;
        end if;
        [ k2, v2, l, r ] := tree;
        if k1 = k2 then
            if l.tree = [] then
                tree := r.tree;
                return;
            end if;
            if r.tree = [] then
                tree := l.tree;
                return;
            end if;
            [ k2, v2 ] := r.delMin();
            tree := [ k2, v2, l, r ];
            return;
        end if;
        if k1 < k2 then
            l.delete(k1);
        else 
            r.delete(k1);
        end if;
        tree := [ k2, v2, l, r ];
    end delete;
    
    procedure delMin();
        [ k, v, l, r ] := tree;
        if l.tree = [] then
            tree := r.tree;
            return [ k, v ];
        end if;
        [ k2, v2 ] := l.delMin();
        tree := [ k, v, l, r ];
        return [ k2, v2 ];
    end delMin;

    procedure selfstr();
        if tree = [] then
            return "[]";
        end if;
        [ k, v, l, r ] := tree;
        return "(" + l.selfstr() + ") " + str(k) + " |-> " + str(v) + " (" + r.selfstr() + ")";
    end selfstr;

    -- Produce and show a postscript file showing the binary tree.
    procedure show();
        count +:= 1;
        counterZeros := 0;
        fileName := "graph" + str(count) + ".dot";
        handle   := open(fileName, "TEXT-OUT");
        printa(handle, "digraph G {\n");
        printa(handle, "    size = \"5,7\";");
        printTreeDot(handle);
        for i in [1..counterZeros] loop
            printa(handle, "    " + -i + " [label = \"\", height = 0.1, width = 0.1, style = filled, fillcolor = black];\n");
        end loop;
        printa(handle, "}\n");
        close(handle);
        system("dot -Tps " + fileName + " -o graph" + count + ".ps; gv graph" + count + ".ps");
    end show;

    procedure printTreeDot(handle);
        if tree = [] then
            return;
        end if;
        [ k, v, l, r ] := tree;
         printa(handle, "    " + k + " [ shape = Mrecord, label = \"{ " + k + " | " + v + "}\" ] ;\n");
        if not l.tree = [] then
            printa(handle, "    " + k + "  -> " + l.tree(1) + ";\n");
        else 
            counterZeros +:= 1;
            printa(handle, "    " + k + " -> " + -counterZeros + ";\n");
        end if;
        if not r.tree = [] then
            printa(handle, "    " + k + " -> " + r.tree(1) + ";\n");
        else
            counterZeros +:= 1;
            printa(handle, "    " + k + " -> " + -counterZeros + ";\n");
        end if;
        l.printTreeDot(handle);
        r.printTreeDot(handle);
    end printTreeDot;

end Map;