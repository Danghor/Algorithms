class AvlMap;

    procedure create();
    procedure node(k,v,l,r);

    procedure find(k1);
    procedure insert(k1, v1);
    procedure delete(k1);
    
    procedure show();
    procedure selfstr();

    procedure isAvl();
    procedure genSkewedTree(h, k);
end AvlMap;

class body AvlMap;

    -- This variable is shared by all instances of the class AvlMap.
    -- It is needed to generate unique file names for the dot files.
    class var count        := 0;
    class var counterZeros := 0;

    var tree;
    var height;  -- the height of the tree

    procedure create();
        tree   := [];
        height := 0;
    end create;

    procedure node(k, v, l, r);
        result := AvlMap();
        result.tree   := [ k, v, l, r ];
        result.height := 1 + (l.height max r.height);
        return result;
    end node;

    procedure find(k1);
        if tree = [] then
            return;
        end if;
        [ k2, v, l, r ] := tree;
        if k1 = k2 then
            return v;
        elseif k1 < k2 then
            return l.find(k1);
        else
            return r.find(k1);
        end if;
    end find;

    procedure insert(k1, v1);
        if tree = [] then
            l := AvlMap();
            r := AvlMap();
            tree   := [ k1, v1, l, r ];
            height := 1;
            return;
        end if;
        [ k2, v2, l, r ] := tree;
        if k1 = k2 then
            tree := [ k1, v1, l, r ];
            return;
        end if;
        if k1 < k2 then
            l.insert(k1, v1);
        else
            r.insert(k1, v1);
        end if;
        tree   := [ k2, v2, l, r ];
        height := 1 + (l.height max r.height);
        restore();
    end insert;

    procedure delete(k1);
        if tree = [] then
            return;
        end if;
        [ k2, v2, l, r ] := tree;
        if k1 = k2 then
            if l.tree = [] then
                tree := r.tree;
                height -:= 1;
                return;
            end if;
            if r.tree = [] then
                tree := l.tree;
                height -:= 1;
                return;
            end if;
            [ k2, v2 ] := r.delMin();
            tree := [ k2, v2, l, r ];
            height := 1 + (l.height max r.height);
            restore();
            return;
        end if;
        if k1 < k2 then
            l.delete(k1);
        else 
            r.delete(k1);
        end if;
        tree := [ k2, v2, l, r ];
        height := 1 + (l.height max r.height);
        restore();
    end delete;
    
    procedure delMin();
        [ k, v, l, r ] := tree;
        if l.tree = [] then
            tree := r.tree;
            height -:= 1;
            return [ k, v ];
        end if;
        [ k2, v2 ] := l.delMin();
        tree := [ k, v, l, r ];
        height := 1 + (l.height max r.height);
        restore();
        return [ k2, v2 ];
    end delMin;

    -- restore the avl property at the root
    procedure restore();
        if tree = [] then 
            return;
        end if;
        [ k1, v1, l1, r1 ] := tree;
        if abs(l1.height - r1.height) <= 1 then
            return;
        end if;
        if l1.height > r1.height then
            [ k2, v2, l2, r2 ] := l1.tree;
            if l2.height >= r2.height then
                tree := [ k2, v2, l2, node(k1, v1, r2, r1) ];
                restoreHeight();
                return;
            end if;
            if l2.height < r2.height then
                [ k3, v3, l3, r3 ] := r2.tree;
                tree := [ k3, v3, node(k2, v2, l2, l3), node(k1, v1, r3, r1) ];
                restoreHeight();
                return;
            end if;
        end if;
        if l1.height < r1.height then
            [ k2, v2, l2, r2 ] := r1.tree;
            if l2.height <= r2.height then
                tree := [ k2, v2, node(k1, v1, l1, l2), r2 ];
                restoreHeight();
                return;
            end if;
            if l2.height > r2.height then
                [ k3, v3, l3, r3 ] := l2.tree;
                tree := [ k3, v3, node(k1, v1, l1, l3), node(k2, v2, r3, r2) ];
                restoreHeight();
                return;
            end if;
        end if;
    end restore;

    procedure restoreHeight();
        if tree = [] then
            return;
        end if;
        [ k, v, l, r ] := tree;
        height := 1 + (l.height max r.height);
    end restoreHeight;

    procedure selfstr();
        if tree = [] then
            return "[]";
        end if;
        [ k, v, l, r ] := tree;
        return "(" + l.selfstr() + ") " + str(k) + " |-> " + str(v) + " (" + r.selfstr() + ")";
    end selfstr;

    -- Produce and show a postscript file showing the binary tree.
    procedure show();
        count +:= 1;
        counterZeros := 0;
        fileName := "graph" + str(count) + ".dot";
        handle   := open(fileName, "TEXT-OUT");
        printa(handle, "digraph G {\n");
        printa(handle, "    size = \"5,7\";");
        printTreeDot(handle);
        for i in [1..counterZeros] loop
            printa(handle, "    " + -i + " [label = \"\", height = 0.1, width = 0.1, style = filled, fillcolor = black];\n");
        end loop;
        printa(handle, "}\n");
        close(handle);
        system("dot -Tps " + fileName + " -o graph" + count + ".ps; gv graph" + count + ".ps");
    end show;

    procedure printTreeDot(handle);
        if tree = [] then
            return;
        end if;
        [ k, v, l, r ] := tree;
         printa(handle, "    " + k + " [ shape = Mrecord, label = \"{ " + k + " | " + height + "}\" ] ;\n");
        if not l.tree = [] then
            printa(handle, "    " + k + "  -> " + l.tree(1) + ";\n");
        else 
            counterZeros +:= 1;
            printa(handle, "    " + k + " -> " + -counterZeros + ";\n");
        end if;
        if not r.tree = [] then
            printa(handle, "    " + k + " -> " + r.tree(1) + ";\n");
        else
            counterZeros +:= 1;
            printa(handle, "    " + k + " -> " + -counterZeros + ";\n");
        end if;
        l.printTreeDot(handle);
        r.printTreeDot(handle);
    end printTreeDot;

    -- used for testing
    procedure isAvl();
        if tree = [] then
            return;
        end if;
        [ k, v, l, r ] := tree;
        l.isAvl();
        r.isAvl();
        assert( abs(l.height - r.height) <= 1 );
    end isAvl;

    -- Generate a lopsided AVL tree with height h, where k is the smallest Key.
    procedure genSkewedTree(h, k);
        if h = 0 then
            return AvlMap();
        end if;
        if h = 1 then
            l := AvlMap();
            r := AvlMap();
            return node(k, 0, l, r);
        end if;
        l := genSkewedTree(h - 1, k);
        k_max := l.getMaxKey();
        r := genSkewedTree(h - 2, k_max + 2);
        return node(k_max + 1, 0, l, r);
    end genSkewedTree;    

    procedure getMaxKey();
        [ k, v, l, r ] := tree;
        if r.tree = [] then
            return k;
        end if;
        return r.getMaxKey();
    end getMaxKey;

end AvlMap;