class HashMap;
    procedure create(number);

    procedure find(key);
    procedure insert(key, value);
    procedure delete(key);

    procedure show();
end HashMap;

class body HashMap;
    -- Nur zur Visualisierung.
    class var fileCount := 0;

    var table;
    var size;         
    var count; -- number of entries

    procedure create(number);
        primes := [               3,
                                  7,
                                 13,
                                 31,
                                 61,
                                127,
                                251,
                                509,
                               1021,
                               2039,
                               4093,
                               8191,
                              16381,
                              32749,
                              65521,
                             131071,
                             262139,
                             524287,
                            1048573,
                            2097143,
                            4194301,
                            8388593,
                           16777213,
                           33554393,
                           67108859,
                          134217689,
                          268435399,
                          536870909,
                         1073741789,
                         2147483647 ];
        index := 1;
        while primes(index) < number loop
            index +:= 1; 
        end loop;
        size  := primes(index);
        table := [];
        count := 0;
    end create;

    procedure find(key);
        index := hash(key);
        if table(index) /= om then
            for i in [ 1 .. #table(index) ] loop
               [ x, y ] :=  table(index)(i);
               if key = x then
                    return y;
                end if; 
            end loop;
        end if;
    end find;

    procedure insert(key, value);
        alpha := count / size;
        if alpha >= 2 then
            rehash();
        end if;
        index := hash(key);
        count +:= 1;
        if table(index) = om then
            table(index) := [ [key, value] ];
        else 
            table(index) := [ [key, value] ] + deleteList(key, table(index));
        end if;
    end insert;

    procedure delete(key);
        index := hash(key);
        if table(index) /= om then
            table(index) := deleteList(key, table(index));
        end if;
    end delete;

    -- Private procedures.

    procedure hash(key);
        result := 0;
        i      := 1;
        while i <= #key loop
            result := (result * 16 + abs(key(i))) mod size;
            i +:= 1;
        end loop;
        return result + 1;
    end hash;
    
    -- Delete from L the first pair of the form [x, y] such that x is equal to key.
    -- If no such pair exists, return L unmodified.
    procedure deleteList(key, L);
        if #L = 0 then
            return L;
        end if;
        [x, y] := L(1);
        if x = key then
            count -:= 1;
            return L(2..);
        end if; 
        return [ L(1) ] + deleteList(key, L(2..));
    end deleteList;

    procedure rehash();
        ht := HashMap(size + 1);
        for index in [1 .. size] loop
            row := table(index);
            if row = om then
                continue;
            end if;
            for [x, y] in row loop
                ht.insert(x, y);
            end loop;
        end loop;
        table := ht.table;
        size  := ht.size;
    end rehash;

    procedure show();
        print("number of nodes: ", count);
        fileCount +:= 1;
        fileName := "graph" + fileCount + ".dot";
        handle   := open(fileName, "TEXT-OUT");
        printa(handle, "digraph G {\n");
        printa(handle, "    nodesep=0.05;");
        printa(handle, "    rankdir=LR;");
        printa(handle, "    node [shape=record, width=0.1, height=0.1];");
        line := "    root [label=\"";
        for i in [1 .. size - 1] loop
            line +:= "<f" + i + "> " + i + "|";
        end loop;
        line +:= "<f" + size + "> " + size + "\"];";
        printa(handle, line);
        printa(handle, "    node [width=1.5];");
        cnt := 0;
        for i in [1 .. size] loop
            list := table(i);
            if list /= om then
                printa(handle, "root:f" + i + " -> node" + (cnt + 1) + ":n;");
                n := #list;
                for j in [ 1 .. n ] loop
                    x := list(j)(1);
                    cnt +:= 1;
                    printa(handle, "node" + cnt + " [label = \"{<n> " + x + " }\" ];");
                    if j < n then
                        printa(handle, "node" + cnt + ":n -> node" + (cnt + 1) + ":n;");
                    end if;
                end loop;
            end if;
        end loop;
        printa(handle, "}\n");
        close(handle);
        system("dot -Tps " + fileName + " -o graph" + fileCount + ".ps; gv graph" + fileCount + ".ps");
    end show;

end HashMap;
