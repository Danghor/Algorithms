class Bug;
    procedure create();
end Bug;

class body Bug;
    -- We use Tk for visualization.
    use Tk;

    var mAlgorithm;
    var mTkIP;

    -- This constructor gets three arguments: Distance, xCoord, yCoord, TkInterpr
    -- 1. Distance is a set of pair of the form [ [ id1, id2 ], d ], where
    --    (a) id1 and id2 are node identifiers
    --    (b) d ist the distance between node id1 and node id2.
    --    Since Distance is a binary relation, it is used as a function.
    -- 2. xCoord is a binary relation giving the x-coordinates of the nodes.
    -- 3. yCoord is a binary relation giving the x-coordinates of the nodes.
    -- The last two arguments are only used for the visualization.
    procedure create();
        -- The rest is for visualization
        mTkIP := tk_create();

	tk_call(mTkIP, "font create niceFont -size 18 -family chevara");
	tk_call(mTkIP, "font create otherFont -size 14 -family arioso");
	tk_call(mTkIP, "font create BigFont -size 20");
	tk_call(mTkIP, "wm title . \"Algorithm Animation\"");

        -- create the menu bar
	tk_call(mTkIP, "frame .mbar -relief raised -bg black" );
	tk_call(mTkIP, "pack .mbar -side top -fill x" );
	tk_call(mTkIP, "menubutton .mbar.algorithm -bg black -fg gold -text Algorithm -underline 0 -menu .mbar.algorithm.menu" );
	tk_call(mTkIP, "pack .mbar.algorithm -side left" );

        -- create the menu
        tk_call(mTkIP, "menu .mbar.algorithm.menu" );
        tk_call(mTkIP, ".mbar.algorithm.menu add radiobutton -variable algorithm -value dijkstra " +
                       "-command set_title_cmd -label \"Dijkstra's Shortest Path Algorithm\" " );
        tk_call(mTkIP, ".mbar.algorithm.menu add radiobutton -variable algorithm -value moore " +
                       "-command set_title_cmd -label \"Moore's Shortest Path Algorithm\" " );
        tk_createcommand(mTkIP, "step_cmd", step);
        tk_createcommand(mTkIP, "set_title_cmd", set_title);

	tk_call(mTkIP, "frame .upper -bg gold" );
        
        tk_call(mTkIP, "frame .upper.right -bg gold");
        tk_call(mTkIP, "button .upper.right.run -text Run -font BigFont -command run_cmd -fg black -bg gold");
        tk_call(mTkIP, "pack .upper.right.run -side top -fill both -expand 1");
        tk_call(mTkIP, "bind .upper.right.run <Return> run_cmd");
        tk_createcommand(mTkIP, "run_cmd", run);

        tk_call(mTkIP, "button .upper.right.step -text Step -font BigFont -command step_cmd -fg black -bg gold");
        tk_call(mTkIP, "pack .upper.right.step -side top -fill both -expand 1");
        tk_call(mTkIP, "bind .upper.right.step <Return> step_cmd");

        tk_call(mTkIP, "pack .upper.right -side left  -fill both -expand 1");

        tk_call(mTkIP, "canvas .cv -width 1000 -height 700 -bg white");
        tk_call(mTkIP, "pack .mbar .upper .cv -fill both -expand 1");
	tk_call(mTkIP, ".cv create text 500 20 -text \"Animated Graph Algorithms\"" +
                       " -font niceFont -fill blue -tag title");
	tk_call(mTkIP, ".cv create text 990 680 -text \"presented by Karl Stroetmann\"" +
                       " -font otherFont -fill #505 -anchor e");
        tk_mainloop(mTkIP);
    end create;

    procedure set_title();
        -- determine algorithm
        mAlgorithm := tk_call(mTkIP, "concat $algorithm");
        tk_call(mTkIP, ".cv delete title");
        if mAlgorithm = "dijkstra" then
             tk_call(mTkIP, ".cv create text 500 20 -text \"Dijkstra's Shortest Path Algorithm\"" +
                            " -font niceFont -fill blue -tag title");
        else 
             tk_call(mTkIP, ".cv create text 500 20 -text \"Moore's Shortest Path Algorithm\"" +
                            " -font niceFont -fill blue -tag title");
        end if;
    end set_title;

    -- This procedure is bound to the "Run" button.  First, it starts the algorithm.
    -- Then, it toggles between running and waiting.
    procedure run();
        print("running");
    end run;

    procedure step();
        print("stepping");
    end step;

end Bug;

program main;
    use Bug;
    g := Bug();

end main;

