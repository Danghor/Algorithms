-- This data structure is similar to a heap, but it is different from
-- those data structures that are defined as heaps in the literature,
-- because I do not work with complete binary trees but with a variant.  

class Heap;

    procedure create();

    procedure insert(k, v);
    procedure top();
    procedure remove();

    procedure isEmpty();    
    procedure show();

end Heap;

class body Heap;

    -- This variable is shared by all instances of the class Heap.
    -- It is needed to generate unique file names for the dot files.
    class var fileCount    := 0;
    class var counterZeros := 0;

    -- Representation:
    --  nil:            tree = []
    --  node(k,v,l,r):  tree = [ k, v, l, r ]

    var tree;
    var number;   -- number of nodes

    -- create the empty tree
    procedure create();
        tree   := [];
        number := 0;
    end create;

    procedure insert(k, v);
        number +:= 1;
        if tree = [] then
            l    := Heap();
            r    := Heap();
            tree := [ k, v, l, r ];
            return;
        end if;
        [ k1, v1, l, r ] := tree;
        -- If k1 <= k we have to insert the pair <k, v> either in l or r.
        if k1 <= k then
            if r.number < l.number then
                r.insert(k, v);
            else 
                l.insert(k, v);
            end if;
            tree := [ k1, v1, l, r ];
            return;
        end if;
        -- Otherwise, the pair <k, v> has to be inserted at the top.
        -- Then the old top has to be moved down into either l or r.
        if r.number < l.number then
            r.insert(k1, v1);
        else
            l.insert(k1, v1);
        end if;
        tree := [ k, v, l, r ];
    end insert;

    procedure top();
        if tree = [] then
            return;
        end if;
        return tree(1..2);
    end top;

    procedure remove();
        removeAux();
        repair();
    end remove;

    -- Reestablish the balancing condition at the top.
    procedure repair();
        if tree = [] then
            return;
        end if;
        [ k, v, l, r ] := tree;
        if abs(l.number - r.number) <= 1 then
            return;
        end if;
        if l.number < r.number + 1 then
            [ k2, v2 ] := r.top();
            r.remove();
            l.insert(k2, v2);        
            tree := [ k, v, l, r ];
            return;
        end if;
        if r.number < l.number + 1 then
            [ k1, v1 ] := l.top();
            l.remove();
            r.insert(k1, v1);        
            tree := [ k, v, l, r ];
            return;
        end if;
    end repair;

    -- Remove the top node.  Do not care whether the balancing condition breaks. 
    procedure removeAux();
        if tree = [] then
            return;
        end if;
        number -:= 1;
        [ l, r ] := tree(3..4);
        if l.tree = [] then
            tree := r.tree;
            return;
        end if;
        if r.tree = [] then
            tree := l.tree;
            return;
        end if;
        [ k1, v1 ] := l.tree(1..2);
        [ k2, v2 ] := r.tree(1..2);
        if k1 <= k2 then
            l.remove();
            tree := [ k1, v1, l, r ];
        else
            r.remove();
            tree := [ k2, v2, l, r ];
        end if;
    end removeAux;

    procedure isEmpty();
        return number = 0;
    end isEmpty;

    -- Produce and display a postscript file showing the binary tree.
    procedure show();
        fileCount +:= 1;
        counterZeros := 0;
        fileName := "graph" + str(fileCount) + ".dot";
        handle   := open(fileName, "TEXT-OUT");
        printa(handle, "digraph G {\n");
        printa(handle, "    size = \"5,7\";");
        printTreeDot(handle);
        for i in [1..counterZeros] loop
            printa(handle, "    " + -i + " [label = \"\", height = 0.1, width = 0.1, style = filled, fillcolor = black];\n");
        end loop;
        printa(handle, "}\n");
        close(handle);
        system("dot -Tps " + fileName + " -o graph" + fileCount + ".ps; gv graph" + fileCount + ".ps");
    end show;

    procedure printTreeDot(handle);
        if tree = [] then
            return;
        end if;
        [ k, v, l, r ] := tree;
         printa(handle, "    " + k + " [ shape = Mrecord, label = \"{ " + k + " | " + v + "}\" ] ;\n");
        if not l.tree = [] then
            printa(handle, "    " + k + "  -> " + l.tree(1) + ";\n");
        else 
            counterZeros +:= 1;
            printa(handle, "    " + k + " -> " + -counterZeros + ";\n");
        end if;
        if not r.tree = [] then
            printa(handle, "    " + k + " -> " + r.tree(1) + ";\n");
        else
            counterZeros +:= 1;
            printa(handle, "    " + k + " -> " + -counterZeros + ";\n");
        end if;
        l.printTreeDot(handle);
        r.printTreeDot(handle);
    end printTreeDot;

end Heap;