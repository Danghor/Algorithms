class Trie;
    procedure create();

    procedure find(k);
    procedure insert(k, v);
    procedure delete(k);
    
    procedure show();
end Trie;

class body Trie;
    class var countFiles := 0;
    class var countNodes := 0;

    var map;
    var value;
    -- The identifier id is only used as an identifier for the display.
    var id;

    procedure create();
        map    := {};
        value  := om;
        ---------------------------- 
        -- only needed for show() --
        ----------------------------
        id          := countNodes;
        countNodes +:= 1;
    end create;

    procedure find(k);
        if #k = 0 then
            return value;
        end if;
        firstChar := k(1);
        branch := map(firstChar);
        if branch /= om then
            return branch.find(k(2..));
        end if;
    end find;

    procedure insert(k, v);
        if #k = 0 then
            value := v;
            return;
        end if;
        firstChar := k(1);
        branch := map(firstChar);
        if branch /= om then
            map -:= { [ firstChar, branch ] };
            branch.insert(k(2..), v);
        else
            branch := Trie();
            branch.insert(k(2..), v);
        end if;
        map +:= { [ firstChar, branch ] };
    end insert;

    procedure delete(k);
        if #k = 0 then
            value := om;
            return;
        end if;
        firstChar := k(1);
        branch := map(firstChar);
        if branch /= om then
            map -:= { [ firstChar, branch ] };
            branch.delete(k(2..));
            if not branch.isEmpty() then
                map +:= { [ firstChar, branch ] };
            end if;
        end if;
    end delete;

    procedure isEmpty();
        return value = om and map = {};
    end isEmpty;

    -- Produce and show a postscript file showing the binary tree.
    procedure show();
        countFiles +:= 1;
        -- produce a new file name every time
        fileName := "graph" + str(countNodes) + ".dot";
        handle   := open(fileName, "TEXT-OUT");
        printa(handle, "digraph G {\n");
        printa(handle, "    size = \"5,7\";");
        if value = om then
            printa(handle, "    " + id + " [label = \"\", height = 0.1, width = 0.2];\n");
        else
            printa(handle, "    " + id + " [ shape = Mrecord, label = \"{ | " + value + "}\" ] ;\n");
        end if;
        for [ char, branch ] in map loop
            branch.printTreeDot(handle, char);
            printa(handle, "     " + id + " -> " + branch.id + ";\n");
        end loop;
        printa(handle, "}\n");
        close(handle);
        system("dot -Tps " + fileName + " -o graph" + countNodes + ".ps; show graph" + countNodes + ".ps");
    end show;

    procedure printTreeDot(handle, char);
        if value = om then
            printa(handle, "    " + id + " [ label = \"" + char + "\" ] ;\n");
        else
            printa(handle, "    " + id + " [ shape = Mrecord, label = \"{ " + char + " | " + value + "}\" ] ;\n");
        end if;
        for [ char, branch ] in map loop
            branch.printTreeDot(handle, char);
            printa(handle, "     " + id + " -> " + branch.id + ";\n");
        end loop;
    end printTreeDot;

end Trie;