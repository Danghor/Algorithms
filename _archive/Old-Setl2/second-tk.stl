-- SETL interactive interface example 1
program main;
    use tkw, tk;
    var Tkk, Tk_interp2, tline;
   
    Tkk := tkw(); 
    Tkk(OM) := "First interpreter";

    -- create another Tk interpreter
    Tk_interp2 := tk_create();

    Tkk{"Destroy"} := lambda(); tk_destroy(Tk_interp2); end lambda;
    -- ensure that second interpreter is destroyed when main window closes
 
    -- cause this second interpreter to close its main window,
    -- but then to perform a computation 
    print("another interpreter: ",tk_call(Tk_interp2,"expr 2 + 2"));
    -- pass a callback routine to the second interpreter
    tk_createcommand(Tk_interp2, "write_main", write_main_thread);
 
    tline := Tkk("entry","30"); 
    -- create a textline
    tline("side") := "top";
    tline(OM) := "Message will appear here";
    tline("font") := "{Times 18 bold}";
   
    -- create a button
    but := Tkk("button", "Use other thread "); 
    but("side") := "top";
    -- bind it to a second-interpreter action which passes data
    -- to the first interpreter, via SETL 
    but{OM} := lambda();
        tk_call(Tk_interp2,"set for_main_thread [clock clicks];write_main");
    end lambda;
 
    Tkk.mainloop();    -- enter the Tk main loop
   
    -- callback routine passed to the second interpreter
    procedure write_main_thread();
        -- fetch time value from second interpreter
        tline(OM) := "Time in clicks is " + tk_call(Tk_interp2,"expr $for_main_thread");
   end write_main_thread;
   
 end main;
