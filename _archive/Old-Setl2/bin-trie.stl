class BinTrie;
    procedure create();

    procedure find(n);
    procedure insert(n, v2);
    procedure delete(n);
    
    procedure show();
end BinTrie;

class body BinTrie;
    -- These two variables are only used for visualization. The first variable
    -- countFiles counts the number of ".dot" files that have been generated 
    -- so far, while countNodes counts the number of nodes in the tree.
    class var countFiles := 0;
    class var countNodes := 0;

    -- Representation:
    --    nil:        tree = []
    --    bin(v,l,r): tree = [ v, l, r ]
    var tree;
    -- The identifier id is only used as an identifier for the 
    -- procedure show.
    var id;

    procedure create();
        tree := [];
        ---------------------------- 
        -- only needed for show() --
        ----------------------------
        id          := countNodes;
        countNodes +:= 1;
    end create;

    procedure find(n);
        if tree = [] then
            return;
        end if;
        [ v, l, r ] := tree;
        if n = 0 then
            return v;
        end if;
        m := n / 2;
        if n mod 2 = 0 then
            return l.find(m);
        else
            return r.find(m);
        end if;
    end find;

    procedure insert(n, v2);
        if tree = [] then
            l := BinTrie();
            r := BinTrie();
            tree := [ om, l, r ];
        end if;
        [ v1, l, r ] := tree;
        if n = 0 then
            tree := [ v2, l, r ];
            return;
        end if;
        m := n / 2;
        if n mod 2 = 0 then
            l.insert(m, v2);
        else
            r.insert(m, v2);
        end if;
        tree := [ v1, l, r ];
    end insert;

    procedure delete(n);
        if tree = [] then
            return;
        end if;
        [ v1, l, r ] := tree;
        if n = 0 then
            tree := [ om, l, r ];
            simplify();
            return;
        end if;
        m := n / 2;
        if n mod 2 = 0 then
            l.delete(m);
        else
            r.delete(m);
        end if;
        tree := [ v1, l, r ];
        simplify();
    end delete;

    procedure simplify();
        [ v, l, r ] := tree;
        if v = om and l.tree = [] and r.tree = [] then
            tree := [];
        end if;
    end simplify;

    -- Produce and show a postscript file showing the binary tree.
    procedure show();
        countFiles +:= 1;
        -- produce a new file name every time
        fileName := "graph" + str(countFiles) + ".dot";
        handle   := open(fileName, "TEXT-OUT");
        printa(handle, "digraph G {\n");
        printa(handle, "    size = \"5,7\";");
        printTreeDot(handle);
        printa(handle, "}\n");
        close(handle);
        system("dot -Tps " + fileName + " -o graph" + countFiles + ".ps; show graph" + countFiles + ".ps");
    end show;

    procedure printTreeDot(handle);
        if tree = [] then
            printa(handle, "    " + id + " [label = \"\", height = 0.1, width = 0.1, style = filled, fillcolor = black];\n");
            return;
        end if;
        [ v, l, r ] := tree;
        if v /= om then
            printa(handle, "    " + id + " [ shape = Mrecord, label = \"{ " + v + " }\" ] ;\n");
        else
            printa(handle, "    " + id + " [label = \"\", height = 0.1, width = 0.1, style = filled, fillcolor = black];\n");
        end if;
        l.printTreeDot(handle);
        printa(handle, "     " + id + " -> " + l.id + ";\n");
        r.printTreeDot(handle);
        printa(handle, "     " + id + " -> " + r.id + ";\n");
    end printTreeDot;

end BinTrie;