program main;

    print( root(2, 100000) );

    -- Compute the square root of n up to k digits.
    -- n needs to be less than 100.
    procedure root(n, k);
        d := 0;
        while (d + 1) * (d + 1) <= n loop
            d := d + 1;
        end loop;
        r := d;
        rSquare := r * r;
        rest := n - r * r;
        while (k > 0) loop
            k := k - 1;
            n := n * 100;
            r := r * 10;
            rest := rest * 100;
            d := 0;
            d1 := d + 1;
            d := find_digit(r, rest, 0, 10);
            print(d);
            rest := rest - 2 * r * d - d * d;
            r := r + d;
        end loop;
        result := "" + r;
        result(2..1) := ".";
        return result;
    end root;

    -- find the largest digit d in {s, l} such that 2 * r * d + d * d <= rest
    procedure find_digit(r, rest, s, l);
        if s + 1 = l then
            return s;
        end if;
        m := (s + l) / 2;
        if 2 * r * m + m * m <= rest then
            return find_digit(r, rest, m, l);
        else 
            return find_digit(r, rest, s, m);
        end if;
    end find_digit;

end main;