class Graph;
    procedure create(Distance, xCoord, yCoord);
    procedure dijkstra(source);
    procedure moore(source);
end Graph;

class body Graph;
    -- We need a priority queue to represent the fringe. 
    use Heap;
    -- We use Tk for visualization.
    use Tk;

    -- Edges is a binary relation representing a function. If "id" is a node
    -- identifier, then edge(id) is a set consisting of all nodes that can
    -- be reached from the node given as argument.
    var mEdges;

    -- Given to node identifiers "a" and "b", Distance(a, b) computes the 
    -- length of the edge leading from a to b.
    var mDistance;

    ------------------------------------------------------------------------
    -- The variables below are only used for visualization.
    ------------------------------------------------------------------------

    -- Given a node identifier "id", xCoord(id) gives the x-coordinate of
    -- the node, while yCoord(id) yields the y-coordinate.
    var mXCoord;
    var mYCoord;

    -- TkIP is the Tk-interpreter
    var mTkIP;

    -- specfies how long to wait between redisplays
    var mDelay;

    -- This is a binary relation that is interpreted as a function. For a node
    -- identifier "id", mChanged(id) count the number of updates of
    -- DistSource(id).
    var mChanged := {};

    -- if set to true, wait
    var mPause;
    var mStep;
    var mStepLoop := true;
    var mInitial  := true;

    var mAlgorithm;

    -- This constructor gets three arguments: Distance, xCoord, yCoord, TkInterpr
    -- 1. Distance is a set of pair of the form [ [ id1, id2 ], d ], where
    --    (a) id1 and id2 are node identifiers
    --    (b) d ist the distance between node id1 and node id2.
    --    Since Distance is a binary relation, it is used as a function.
    -- 2. xCoord is a binary relation giving the x-coordinates of the nodes.
    -- 3. yCoord is a binary relation giving the x-coordinates of the nodes.
    -- The last two arguments are only used for the visualization.
    procedure create(Distance, xCoord, yCoord);
        mDistance := Distance;
        mXCoord   := xCoord;
        mYCoord   := yCoord;
        mEdges    := {};
        for [ pair, d ] in mDistance loop
            [ a, b ] := pair;
            if mEdges(a) = om then
                mEdges(a) := { b };
            else
                mEdges(a) +:= { b };
            end if;
        end loop;

        -- The rest is for visualization
        mTkIP := tk_create();

	tk_call(mTkIP, "font create niceFont -size 18 -family chevara");
	tk_call(mTkIP, "font create otherFont -size 14 -family arioso");
	tk_call(mTkIP, "font create BigFont -size 20");
	tk_call(mTkIP, "wm title . \"Algorithm Animation\"");

        -- create the menu bar
	tk_call(mTkIP, "frame .mbar -relief raised -bg black" );
	tk_call(mTkIP, "pack .mbar -side top -fill x" );
	tk_call(mTkIP, "menubutton .mbar.algorithm -bg black -fg gold -text Algorithm -underline 0 -menu .mbar.algorithm.menu" );
	tk_call(mTkIP, "pack .mbar.algorithm -side left" );

        -- create the menu
        tk_call(mTkIP, "menu .mbar.algorithm.menu" );
        tk_call(mTkIP, ".mbar.algorithm.menu add radiobutton -variable algorithm -value dijkstra " +
                       "-command set_title -label \"Dijkstra's Shortest Path Algorithm\" " );
        tk_call(mTkIP, ".mbar.algorithm.menu add radiobutton -variable algorithm -value moore " +
                       "-command set_title_cmd -label \"Moore's Shortest Path Algorithm\" " );
        tk_createcommand(mTkIP, "set_title_cmd", set_title);

	tk_call(mTkIP, "frame .upper -bg gold" );
	tk_call(mTkIP, "scale .upper.slider -bg gold -label \"Time delay\" -showvalue true -length 800 -troughcolor pink " +
                      "-orient horizontal -from 0 -to 100 -tickinterval 5 -variable delay");
        tk_call(mTkIP, "pack .upper.slider -side left  -fill x -expand 1");
        
        tk_call(mTkIP, "frame .upper.right -bg gold");
        tk_call(mTkIP, "button .upper.right.run -text Run -font BigFont -command run_cmd -fg black -bg gold");
        tk_call(mTkIP, "pack .upper.right.run -side top -fill both -expand 1");
        tk_call(mTkIP, "bind .upper.right.run <Return> run_cmd");
        tk_createcommand(mTkIP, "run_cmd", run);

        tk_call(mTkIP, "button .upper.right.step -text Step -font BigFont -command step_cmd -fg black -bg gold");
        tk_call(mTkIP, "pack .upper.right.step -side top -fill both -expand 1");
        tk_call(mTkIP, "bind .upper.right.step <Return> step_cmd");
--        tk_createcommand(mTkIP, "step_cmd", step);

        tk_call(mTkIP, "pack .upper.right -side left  -fill both -expand 1");

        tk_call(mTkIP, "canvas .cv -width 1000 -height 700 -bg white");
        tk_call(mTkIP, "pack .mbar .upper .cv -fill both -expand 1");
	tk_call(mTkIP, ".cv create text 500 20 -text \"Animated Graph Algorithms\"" +
                       " -font niceFont -fill blue -tag title");
	tk_call(mTkIP, ".cv create text 990 680 -text \"presented by Karl Stroetmann\"" +
                       " -font otherFont -fill #505 -anchor e");

        c := 0;
        Nodes := domain(mEdges);
        -- draw the nodes
        for id in Nodes loop
            radius := 4;
            x := mXCoord(id);
            y := mYCoord(id);
            tk_call(mTkIP, ".cv create oval " + 
                           (x - radius) + " " + (y - radius) + " " + 
                           (x + radius) + " " + (y + radius) + 
                           " -fill black -tag n" + id);
            -- tk_call(mTkIP, ".cv create text " + (x + 5) + " " + (y - 5) + " " + " -text " + id + " -anchor sw");
        end loop;
        -- draw the edges
        for id in Nodes loop
            for node in mEdges(id) loop
                if id < node then
                    tk_call(mTkIP, ".cv create line " + 
                           mXCoord(id) + " " + mYCoord(id) + " " + 
                           mXCoord(node) + " " + mYCoord(node) + 
                           " -fill black -tag e" + id + "_" + node );
                    d := mDistance(id, node);
                    x := (mXCoord(id) + mXCoord(node)) / 2;
                    y := (mYCoord(id) + mYCoord(node)) / 2;
                    if abs(mXCoord(id) - mXCoord(node)) > abs(mYCoord(id) - mYCoord(node)) then
                        tk_call(mTkIP, ".cv create text " + x + " " + (y - 10) + " -text " + d + " -fill brown");
                    else
                        tk_call(mTkIP, ".cv create text " + (x + 10) + " " + y + " -text " + d + " -fill brown");
                    end if;
                end if;
            end loop;
        end loop;
        tk_mainloop(mTkIP);
    end create;

    -- This procedure computes the shortest path from the node source to all nodes
    -- reachable from this node.  It implements Dijkstra's shortest path algorithm.
    procedure dijkstra(source);
        -- DistSource is a binary relation representing a function.  For all node
        -- identifiers "id" that have been visited, DistSource(id) is the distance
        -- of the shortest path from "source" to "id".
        DistSource := {};
        DistSource(source) := 0;
        -- BackPtr is a binary relation representing a function.  For all node
        -- identifiers "id" that have been visited, BackPtr(id) gives the second
        -- node on a shortest path from "id" to "source".
        BackPtr := {};
        BackPtr(source) := source;
        -- visualize the source by drawing a circle around it
        circle(source);
        -- fringe is the set of all nodes that satisfy the following requirements:
        --   1. The node has not yet been visited.
        --   2. There is a node in the set Visited that is connected by an edge
        --      to this node.
        -- The fringe is represented as a Heap where the priority is the distance
        -- of the node to the source while the value is the node identifier.
        Fringe := Heap();
        Fringe.insert(0, source);
        -- As long as the fringe is not empty, we pick that node
        -- from the fringe, that has the smallest distance to the source.
        -- Then we add all nodes that are adjacent to this node to the fringe.
        -- Furthermore, we have to take care of the possiblity that the distance 
        -- from the source of a node that is already on the fringe can decrease.
        while not Fringe.isEmpty() loop
            [ distIdTop, idTop ] := Fringe.top();
            -- mark the newly visited node
            visitGraphically(idTop, BackPtr(idTop));
            Fringe.remove();
            for id in mEdges(idTop) loop
                if DistSource(id) = om then
                    -- If the new adjacent node is not yet on the fringe, we add it
                    -- to the fringe and initialize the DistSource function.
                    distId         := distIdTop + mDistance(idTop, id);
                    DistSource(id) := distId;
                    BackPtr(id)    := idTop;
                    Fringe.insert(distId, id); 
                    showDistance(id, distId, om, idTop);
                else
                    -- If the adjacent node is already on the fringe, we have to check
                    -- whether the distance to the source decreases.
                    oldDist := DistSource(id);
                    newDist := distIdTop + mDistance(idTop, id);
                    if newDist < oldDist then
                        DistSource(id) := newDist;
                        Fringe.change(id, newDist);
                        showDistance(id, newDist, BackPtr(id), idTop);
                        BackPtr(id) := idTop;
                    end if;
                end if;
            end loop;
            unvisitGraphically(idTop, distIdTop);
        end loop;
    end dijkstra;

    -- This procedure computes the shortest path from the node source to all nodes
    -- reachable from this node.  It implements Moore's shortest path algorithm.
    procedure moore(source);
        -- DistSource is a binary relation representing a function.  For all node
        -- identifiers "id" that have been visited, DistSource(id) is the distance
        -- of the shortest path from "source" to "id".
        DistSource := {};
        DistSource(source) := 0;
        -- BackPtr is a binary relation representing a function.  For all node
        -- identifiers "id" that have been visited, BackPtr(id) gives the second
        -- node on a shortest path from "id" to "source".
        BackPtr := {};
        BackPtr(source) := source;
        -- visualize the source by drawing a circle around it
        circle(source);
        -- Fringe is the set of all nodes that satisfy the following requirements:
        --   1. The node has not yet been visited.
        --   2. There is a node in the set Visited that is connected by an edge
        --      to this node.
        -- FringeSet is the set of all nodes that are currently on the fringe.
        FringeSet := { source };
        -- Run Phase: As long as the fringe is not empty, we pick that node
        -- from the fringe, that has the smallest distance to the source.
        -- Then we add all nodes that are adjacent to this node to the fringe.
        -- Furthermore, we have to take care of the possiblity that the distance 
        -- from the source of a node that is already on the fringe can decrease.
        while FringeSet /= {} loop
            node := arb FringeSet;
            distNode := DistSource(node);
            -- mark the newly visited node
            visitGraphically(node, BackPtr(node));
            FringeSet -:= { node };
            for id in mEdges(node) loop
                if DistSource(id) = om then
                    -- If the new adjacent node is not yet been visited, we 
                    -- initialize the function DistSource.
                    distId         := distNode + mDistance(node, id);
                    DistSource(id) := distId;
                    BackPtr(id)    := node;
                    FringeSet     +:= { id };
                    showDistance(id, distId, om, node);
                else
                    -- If the adjacent node is already on the fringe, we have to check
                    -- whether the distance to the source decreases.
                    oldDist := DistSource(id);
                    newDist := distNode + mDistance(node, id);
                    if newDist < oldDist then
                        DistSource(id) := newDist;
                        oldNode        := BackPtr(id);
                        BackPtr(id)    := node;
                        FringeSet     +:= { id };
                        showDistance(id, newDist, oldNode, node);
                    end if;
                end if;
            end loop;
            unvisitGraphically(node, distIdTop);
        end loop;
    end moore;

    -- The procedures below are only needed for visualization.
    
    procedure set_title();
        -- determine algorithm
        mAlgorithm := tk_call(mTkIP, "concat $algorithm");
        tk_call(mTkIP, ".cv delete title");
        if mAlgorithm = "dijkstra" then
             tk_call(mTkIP, ".cv create text 500 20 -text \"Dijkstra's Shortest Path Algorithm\"" +
                            " -font niceFont -fill blue -tag title");
        else 
             tk_call(mTkIP, ".cv create text 500 20 -text \"Moore's Shortest Path Algorithm\"" +
                            " -font niceFont -fill blue -tag title");
        end if;
    end set_title;

    -- This procedure is bound to the "Run" button.  First, it starts the algorithm.
    -- Then, it toggles between running and waiting.
    procedure run();
        print("running");
        mStep     := false;
        mStepLoop := false;
        if mInitial = true then
            mInitial  := false;
            mPause    := false;
            mDelay    := str2number(tk_call(mTkIP, "concat $delay"));
            tk_call(mTkIP, ".upper.right.run configure -bg gold -text Wait");
            if mAlgorithm = "dijkstra" then
                dijkstra(16);
            else 
                moore(16);
            end if;
        elseif mPause = true or mStep then
            mDelay := str2number(tk_call(mTkIP, "concat $delay"));
            mPause := false;
            tk_call(mTkIP, ".upper.right.run configure -bg gold -text Wait");
        else
            mDelay := str2number(tk_call(mTkIP, "concat $delay"));
            mPause := true;
            tk_call(mTkIP, ".upper.right.run configure -bg magenta -text Run");
        end if;
    end run;

    procedure step();
        tk_call(mTkIP, ".upper.right.step flash");
        mPause := false;
        mStep  := true;
        if mInitial = true then
            mInitial := false;
            mDelay   := str2number(tk_call(mTkIP, "concat $delay"));
            if mAlgorithm = "dijkstra" then
                dijkstra(16);
            else 
                moore(16);
            end if;
        else
            mStepLoop := not mStepLoop;
        end if;
        tk_call(mTkIP, ".upper.right.run configure -bg magenta -text Run");
    end step;

    -- Wait until the variable "mPause" gets false.
    procedure waitForPause();
        while true loop
            if not mPause then
                return;
            end if;
            tk_call(mTkIP, "after 1");
            tk_call(mTkIP, "update");
        end loop;
    end waitForPause;

    -- visualize a node after visiting
    procedure visitGraphically(id, lastId);
        blinkNoStop("n" + id, "red", "green");
        tk_call(mTkIP, ".cv itemconfigure n" + id + " -fill green");
        x := mXCoord(id);
        y := mYCoord(id);
        tk_call(mTkIP, ".cv delete e" + id + ":" + lastId );
        tk_call(mTkIP, ".cv create oval " + (x - 10) + " " + (y - 10) + 
                      " " + (x + 10) + " " + (y + 10) + " " +
                      " -width 2 -outline green -tag circle");
        blinkEdge(id, lastId, "red", "blue");
        blinkNoStop("circle", "green", "blue");
        tk_call(mTkIP, "update");
        tk_call(mTkIP, "after " + mDelay);
    end visitGraphically;

    procedure showDistance(id, newDist, oldSource, source);
        if mChanged(id) = om then
            mChanged(id) := 0;
        else 
            mChanged(id) +:= 1;
        end if;
        blinkNoStop("n" + id, "blue", "red");
        xId := mXCoord(id);
        yId := mYCoord(id);
        if oldSource /= om then
            blinkEdge(id, oldSource, "black", "magenta");
        end if;
        tk_call(mTkIP, ".cv itemconfigure t" + id + " -fill magenta" );
        tk_call(mTkIP, ".cv create text " + (xId - 5) + " " + (yId + 18 * mChanged(id)) + " " + 
                       " -text " + newDist + " -tag t" + id + " -fill red -anchor ne");
        blinkEdge(id, source, "black", "red");
    end showDistance;

    procedure unvisitGraphically(id, distId);
        blinkNoStop("n" + id, "red", "blue");
        tk_call(mTkIP, ".cv delete circle");
        x := mXCoord(id);
        y := mYCoord(id);
        tk_call(mTkIP, "update");
        tk_call(mTkIP, "after " + mDelay);
    end unvisitGraphically;

    procedure blinkEdge(a, b, oldColor, newColor);
        if b < a then
            blinkEdge(b, a, oldColor, newColor);
            return;
        end if;
        tk_call(mTkIP, ".cv delete e" +  a + "_" + b);
        tag := "e" + a + ":" + b;
        xA  := mXCoord(a);
        yA  := mYCoord(a);
        xB  := mXCoord(b);
        yB  := mYCoord(b);
        tk_call(mTkIP, ".cv create line " + 
                      xA + " " + yA + " " + xB + " " + yB + 
                      " -fill " + newColor + " -width 2 -tag " + tag );
        blink(tag, oldColor, newColor);
    end blinkEdge;

    -- Let a given "tag" blink 10 times by switching between the colors
    -- "oldColor" and "newColor".
    procedure blink(tag, oldColor, newColor);
        i := 1;
        while mStepLoop or i < 11 loop
            if not mStepLoop then
                waitForPause();
            end if;
            if mStepLoop then            
                delay := 100;
            else
                delay := mDelay;
            end if;
            tk_call(mTkIP, ".cv itemconfigure " + tag + " -fill " + oldColor);
            tk_call(mTkIP, "after " + delay);
            tk_call(mTkIP, "update");
            tk_call(mTkIP, ".cv itemconfigure " + tag + " -fill " + newColor);
            tk_call(mTkIP, "after " + delay);
            tk_call(mTkIP, "update");
            i +:= 1;
        end loop;
        if mStep then
            mStepLoop := true;
        end if;
    end blink;

    -- Let a given "tag" blink 10 times by switching between the colors
    -- "oldColor" and "newColor".  Do not wait for step.
    procedure blinkNoStop(tag, oldColor, newColor);
        i := 1;
        while i < 11 loop
            tk_call(mTkIP, ".cv itemconfigure " + tag + " -fill " + oldColor);
            tk_call(mTkIP, "after " + mDelay);
            tk_call(mTkIP, "update");
            tk_call(mTkIP, ".cv itemconfigure " + tag + " -fill " + newColor);
            tk_call(mTkIP, "after " + mDelay);
            tk_call(mTkIP, "update");
            i +:= 1;
        end loop;
    end blinkNoStop;

    -- draw a circle around a node id 
    procedure circle(id);
        x := mXCoord(id);
        y := mYCoord(id);
        tk_call(mTkIP, ".cv create oval " + (x - 10) + " " + (y - 10) + 
                      " " + (x + 10) + " " + (y + 10) + " " +
                      " -width 2 -outline black");
        tk_call(mTkIP, ".cv itemconfigure n" + id + " -fill blue");
    end circle;

    procedure str2number(s);
	result := 0;
	for i in [1..#s] loop
	    result := 10 * result + abs(s(i)) - 48;
	end loop;
	return result;
    end str2number;

end Graph;

program main;
    use Graph;

    g := generateGraph(9, 6);

    procedure generateGraph(n, m);
        var xCoord := {};
        var yCoord := {};
        -- count is the number of nodes
        count := 0;
        -- length gives the average distance between nodes in x and y direction
        length := 100;
        -- Nodes is a list of all node identifiers.    
        Nodes  := [];
        Edges  := {};
        Distance := {};
        for i in [1 .. n] loop
            for j in [1 .. m] loop
                count +:= 1;
                Nodes +:= [ count ];
                Edges(count) := {};
                xCoord(count) := length * i + 30 * sin(10.1 * count);
                yCoord(count) := length * j + 30 * cos(10.1 * count);
                if i > 1 then
                    Edges(count) +:= { count - m };
                end if;
                if i < n then
                    Edges(count) +:= { count + m };
                end if;
                if j > 1 then
                    Edges(count) +:= { count - 1 };
                end if;
                if j < m then
                    Edges(count) +:= { count + 1 };
                end if;
            end loop;
        end loop;
        -- compute the distances
        for id in Nodes loop
            for node in Edges(id) loop
                d := pythagoras(id, node);
                Distance(id, node) := d;
                Distance(node, id) := d;
            end loop;
        end loop;
        -- add special hyper space connection form node 16 to node 30
        Distance +:= { [ [ 16, 30 ], 10 ] };

        -- generate the graph
        return Graph(Distance, xCoord, yCoord);

        -- compute the Euclidean distance between two nodes
        procedure pythagoras(a, b);
            xa := xCoord(a);
            ya := yCoord(a);
            xb := xCoord(b);
            yb := yCoord(b);
            result := floor(sqrt((xa - xb) ** 2 + (ya - yb) ** 2));
            return result;
        end pythagoras;

    end generateGraph;

end main;
