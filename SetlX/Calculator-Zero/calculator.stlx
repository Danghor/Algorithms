load("stack-array.stlx");
load("bisection.stlx");

extractTokens := procedure(s) {
    tokenList := [];
    scan (s) {
        regex '0|[1-9][0-9]*' as [ number ]: tokenList += [ int(number) ];
        regex 'exp'           as operator  : tokenList += operator;
        regex 'log'           as operator  : tokenList += operator;
        regex 'sin'           as operator  : tokenList += operator;
        regex 'cos'           as operator  : tokenList += operator;
        regex 'tan'           as operator  : tokenList += operator;
        regex 'asin'          as operator  : tokenList += operator;
        regex 'acos'          as operator  : tokenList += operator;
        regex 'atan'          as operator  : tokenList += operator;
        regex 'sqrt'          as operator  : tokenList += operator;
        regex 'x'             as operator  : tokenList += operator;
        regex 'e'             as operator  : tokenList += operator;
        regex 'Pi'            as operator  : tokenList += operator;
        regex '\*\*'          as operator  : tokenList += operator;
        regex '[+\-*/%()]'    as operator  : tokenList += operator;
        regex '[ \t]'                      : // skip
    }
    return tokenList;
};

computeZero := procedure() {
    s  := read("enter function: ");
    tl := extractTokens(s);
    left_Boundary := read("Enter left  boundary: ");
    rightBoundary := read("Enter right boundary: ");
    f := procedure(x) {
        c := calculator(tl, x);
        return c.evaluate();
    };
    zero := bisection(f, left_Boundary, rightBoundary, (1/10)**102);
    if (isRational(zero)) {
        print("x0 = $nDecimalPlaces(zero, 101)$");
    } else {
        print("x0 = $zero$");
    }
};

class calculator(tl, x) {
    mTokenStack := createStack(tl);
    mArguments  := stack();
    mOperators  := stack();
    mValue      := x;

  static {   
    // Return true if operator stackOp should be evaluated before operator nextOp,
    // where stackOp is the operator on top of the operator stack, while
    // nextOp is the next token from the token stack.
    evalBefore := procedure(stackOp, nextOp) {
        if (stackOp == "(") {
            return false;
        }
        if (precedence(stackOp) > precedence(nextOp)) {
            return true;
        } else if (isUnaryOperator(stackOp) && isUnaryOperator(nextOp)) {
            return false;
        } else if (precedence(stackOp) == precedence(nextOp)) {
            if (stackOp == nextOp) {
                return isLeftAssociative(stackOp);
            }
            return true;
        } 
        return false;
    };
    
    precedence := procedure(op) {
        switch {
            case op in [ "+", "-" ]      : return 1;
            case op in [ "*", "/", "%" ] : return 2;
            case op in [ "**" ]          : return 3;
            case isUnaryOperator(op)     : return 4;
            case isConstOperator(op)     : return 5;
            default: abort("unkown operator in precedence: $op$");
        }
    };
    
    isLeftAssociative := procedure(op) {
        switch {
            case op in [ "+", "-", "*", "/", "%" ]: return true;
            case op in [ "**" ]                   : return false;
            case isUnaryOperator(op)              : return false;
            default: abort("unkown operator in isLeftAssociative: $op$");
        }
    };
    
    isConstOperator := procedure(op) {
        return op in [ "e", "Pi", "x" ];
    };
    
    isUnaryOperator := procedure(op) {
        return op in [ "sqrt", "exp", "log", "sin", "cos", "tan", 
                       "atan", "asin", "acos" ];
    };
    
    // This methods removes arguments from the argument stack and combines
    // these arguments according to the operator on top of the operator stack.
    // This operator is then removed from the operator stack and the result of
    // the computation is pushed onto the argument stack.
    popAndEvaluate := procedure() {
        op := mOperators.top(); mOperators.pop();
        if (op == "x") {
            result := mValue;
        } else if (isConstOperator(op)) {
            result := mathConst(op);
        } else if (isUnaryOperator(op)) {
            arg := mArguments.top(); mArguments.pop();
            match (op) {
                case "exp"  : result :=  exp(arg);
                case "log"  : result :=  log(arg);
                case "sin"  : result :=  sin(arg);
                case "cos"  : result :=  cos(arg);
                case "tan"  : result :=  tan(arg);
                case "asin" : result := asin(arg);
                case "acos" : result := acos(arg);
                case "atan" : result := atan(arg);
                case "sqrt" : result := sqrt(arg);
                default: abort("ERROR: *** Unknown Operator *** $op$");
            }
        } else { // at this point, op must be a binary operator 
            rhs := mArguments.top(); mArguments.pop();
            lhs := mArguments.top(); mArguments.pop();
            match (op) {
                case "+" : result := lhs + rhs;
                case "-" : result := lhs - rhs;
                case "*" : result := lhs * rhs;
                case "/" : result := lhs / rhs;
                case "%" : result := lhs % rhs;
                case "**": result := lhs ** rhs;       
                default: abort("ERROR: *** Unknown Operator *** $op$");
            }
        }
        mArguments.push(result);
    };
    
    evaluate := procedure() {
        while (!mTokenStack.isEmpty()) {
            if (isNumber(mTokenStack.top())) {
                number := mTokenStack.top(); mTokenStack.pop();
                mArguments.push(number);
                continue;
            } 
            nextOp := mTokenStack.top();
            mTokenStack.pop();
            if (mOperators.isEmpty() || nextOp == "(") {
                mOperators.push(nextOp);
                continue;
            }
            stackOp := mOperators.top();
            if (stackOp == "(" && nextOp == ")") {
                mOperators.pop();
            } else if (nextOp == ")") {
                popAndEvaluate();
                mTokenStack.push(nextOp);
            } else if (evalBefore(stackOp, nextOp)) {
                popAndEvaluate();
                mTokenStack.push(nextOp);
            } else {
                mOperators.push(nextOp);
            }
        }
        while (!mOperators.isEmpty()) { popAndEvaluate(); }
        return mArguments.top(); 
    };
  }
}

computeZero();

